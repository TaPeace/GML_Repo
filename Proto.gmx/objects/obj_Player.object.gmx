<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_X</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init variables

//Speed variables
hSpd = 0;
vSpd = 0;
moveSpeed = 120 / room_speed;
SecondsSinceLastShot = 0;
SecondsBetweenShots = 0;
IsAiming = false;
MouseDirection = 0;

//Actual weapon, -1 if no weapon picked up
gun = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step event

//Get inputs
kUp = -keyboard_check(ord("W"));
kDown = keyboard_check(ord("S"));
kLeft = -keyboard_check(ord("A"));
kRight = keyboard_check(ord("D"));

//Movement values
vMove = kUp + kDown;
hMove = kLeft + kRight;
vSpd = vMove * moveSpeed;
hSpd = hMove * moveSpeed;

//Point direction to mouse
MouseDirection = point_direction(x,y,mouse_x,mouse_y);

//Horizontal collision
if place_meeting(x + hSpd,y,obj_Blocks_Parent){
    //Slopes up
    if place_meeting(x + sign(hSpd), y, obj_Blocks_Parent) &amp;&amp; !place_meeting(x + sign(hSpd), y - 1, obj_Blocks_Parent){
        --y;
    }
    //Slopes down
    if place_meeting(x + sign(hSpd), y, obj_Blocks_Parent) &amp;&amp; !place_meeting(x + sign(hSpd), y + 1, obj_Blocks_Parent){
        ++y;
    }
    //else
    if !place_meeting(x + sign(hSpd),y,obj_Blocks_Parent){
        x += sign(hSpd);
    }
    hSpd = 0;
}
x += hSpd;

//Vertical collision
if place_meeting(x,y + vSpd,obj_Blocks_Parent){
    if place_meeting(x, y + sign(vSpd), obj_Blocks_Parent) &amp;&amp; !place_meeting(x - 1, y + sign(vSpd), obj_Blocks_Parent){
        --x;
    }
    if place_meeting(x, y + sign(vSpd), obj_Blocks_Parent) &amp;&amp; !place_meeting(x + 1, y + sign(vSpd), obj_Blocks_Parent){
        ++x;
    }
    if !place_meeting(x,y + sign(vSpd),obj_Blocks_Parent){
        y += sign(vSpd);
    }
    vSpd = 0;
}
y += vSpd;

//Aiming
if mouse_check_button(mb_right){
    window_set_cursor(cr_none);
    cursor_sprite = spr_AimCursor;
    IsAiming = true;
    //Shooting
    if mouse_check_button(mb_left) {
        if gun == 1 and SecondsSinceLastShot &gt;= SecondsBetweenShots {
                Bullet = instance_create(x,y,obj_bullet);
                Bullet.direction = MouseDirection + random_range(-0.5,0.5);
                SecondsSinceLastShot = 0;
        }
    }
} else {
    window_set_cursor(cr_default);
    cursor_sprite = -1;
    IsAiming = false;
}

SecondsSinceLastShot += 1 / room_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//Draw aimingline
if IsAiming {
    draw_set_alpha(0.4);
    draw_line_width_colour(x,y,mouse_x,mouse_y,2,c_red,c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
